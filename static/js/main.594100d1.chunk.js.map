{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","score","allImages","clickedImages","ClickImage","props","react_default","a","createElement","src","number","onClick","e","n","preventDefault","includes","push","i","length","j","Math","floor","random","temp","ReactDOM","render","src_App_0","document","getElementById","imageClicked","height","width","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAIC,EAAQ,EAERC,EAAY,CAAC,2BAA4B,yBAA0B,sBAAuB,2BAA4B,kBAEtHC,EAAgB,GAoBpB,SAASC,EAAWC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAUG,EAAMK,QAASC,QAAS,SAACC,GAAD,OApBhD,SAAsBC,EAAGD,GACvBA,EAAEE,iBACEX,EAAcY,SAASF,IACvBZ,EAAQ,EACRE,EAAgB,KAEhBF,IACAE,EAAca,KAAKH,IAEvB,IAAK,IAAII,EAAIf,EAAUgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOrB,EAAUe,GACrBf,EAAUe,GAAKf,EAAUiB,GACzBjB,EAAUiB,GAAKI,EAEjBC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SAKIC,CAAa3B,EAAUG,EAAMK,QAASE,IAAIkB,OAAO,MAAMC,MAAM,YAI9GC,cAEJ,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/B,KACDmC,MAAQ,GAFIP,wEAOjB,OACE3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBAAYP,GAEZK,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,OAAQ,IACpBJ,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,OAAQ,IACpBJ,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,OAAQ,IACpBJ,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,OAAQ,IACpBJ,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,OAAQ,YAjBR+B,aAwBHT,YAGfR,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDiE3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.594100d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nvar score = 0;\n\nvar allImages = [\"images/biggie-cheese.jpg\", \"images/dr-grandayy.jpg\", \"images/Snidbert.png\", \"images/south-america.jpg\", \"images/tom.jpg\"];\n\nvar clickedImages = [];\n\nfunction imageClicked(n, e) {\n  e.preventDefault();\n  if (clickedImages.includes(n)) {\n      score = 0;\n      clickedImages = [];\n  } else {\n      score++;\n      clickedImages.push(n);\n  }\n  for (var i = allImages.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = allImages[i];\n    allImages[i] = allImages[j];\n    allImages[j] = temp;\n  }\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\nfunction ClickImage(props) {\n  return(\n    <img src={allImages[props.number]} onClick={(e) => imageClicked(allImages[props.number], e)} height=\"100\" width=\"100\" />\n  );\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  \n\n  render() {\n    return (\n      <div>\n      <h2>Score: {score}</h2>\n\n      <ClickImage number={0} />\n      <ClickImage number={1} />\n      <ClickImage number={2} />\n      <ClickImage number={3} />\n      <ClickImage number={4} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}